# Copyright (C) 2021  Marcelo Politzer Couto
# Copyright (C) 2010  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

function pathname { regexp -s 2:"$2" '^(\(.*\))/*(/.*)$' "$1"; }
function devname  { regexp -s "$2" '^(\(.*\)).*$' "$1"; }

function isolinux_iso_entry {
    realdev="$1"
    isopath="$2"
    loopdev="$3"

    if test -f /boot/isolinux/isolinux.cfg; then
        cfgpath=/boot/isolinux/isolinux.cfg
    elif test -f /syslinux/syslinux.cfg; then
        cfgpath=/syslinux/syslinux.cfg
    elif test -f /isolinux/isolinux.cfg; then
        cfgpath=/isolinux/isolinux.cfg
    elif test -f /boot/x86_64/loader/isolinux.cfg; then
        cfgpath=/boot/x86_64/loader/isolinux.cfg
    else
        return 1;
    fi

    echo isolinux based $isopath: yes
    probe -s label -l $realdev
    menuentry "${indent}${isopath} (isolinux)" "$realdev" "$isopath" "$cfgpath" {
        set device="$2"
        set isopath="$3"
        set cfgpath="$4"

        probe -s rootuuid -u $device
        loopback loop "${device}${isopath}"
        set root=(loop)

        # this flag requires a hacked grub!!

        # language settings
        set linux_extra="$langset"

        # arch based
        set linux_extra="${linux_extra} img_dev=/dev/disk/by-uuid/$rootuuid img_loop=$isopath earlymodules=loop"

        # gentoo based
        set linux_extra="${linux_extra} isofrom=$isopath"

        # ubuntu based, fedora, opensuse, rosa
        set linux_extra="${linux_extra} iso-scan/filename=$isopath"

        # antiX based
        set linux_extra="${linux_extra} from=all fromiso=$isopath"

        # Grml Live Linux
        set linux_extra="${linux_extra} findiso=$isopath"

        # sysrcd
        set linux_extra="${linux_extra} isoloop=$isopath"

        # MagOS Linux (UIRD)
        set linux_extra="${linux_extra} uird.from=${isopath},/MagOS uird.force scantimeout=3"

        # TODO: SUSE based
        set linux_extra="${linux_extra} isofrom_device=/dev/disk/by-uuid/$rootuuid isofrom_system=$isopath"

        # others?
        set linux_extra="${linux_extra} isoboot=$isopath"

        export linux_extra
        syslinux_configfile $cfgpath
    }
    return 0
}

function loopback_iso_entry {
    realdev="$1"
    isopath="$2"
    loopdev="$3"

    if test -f /boot/grub/loopback.cfg; then
        cfgpath=/boot/grub/loopback.cfg
    elif test -f /grub/loopback.cfg; then
        cfgpath=/grub/loopback.cfg
    else
        return 1
    fi

    echo loopback.cfg $isopath: yes
    probe -s label -l $realdev
    menuentry "${indent}${isopath} (loopback)" "$realdev" "$isopath" "$cfgpath" {
        set device="$2"
        set isopath="$3"
        set cfgpath="$4"

        loopback loop "${device}${isopath}"
        set root=(loop)

        probe -s rootuuid -u $device
        set isopath="$isopath $langset"
        export isopath

        configfile $cfgpath
        loopback -d loop
    }
    return 0
}

function scan_isos {
    isodirs="$1"

    echo "scanning ..."
    for dev in (*); do
        for dir in $isodirs; do
            for file in ${dev}${dir}/*.iso ${dev}${dir}/*.ISO; do
                if ! test -f "$file"; then continue; fi

                pathname $file isopath

                if ! loopback loopdev_scan "$file"; then continue; fi
                saved_root=$root
                set root=(loopdev_scan)

                if false; then true;
                elif loopback_iso_entry $dev $isopath (loopdev_scan); then true;
                elif isolinux_iso_entry $dev $isopath (loopdev_scan); then true;
                else true; fi

                set root=$saved_root
                loopback -d loopdev_scan
            done
        done
    done
    return 0
}

insmod part_gpt
insmod part_msdos
insmod regexp

langcode="$lang"

regexp -s langcode '(^..)' "$lang"
langset="lang=${lang} debian-installer/language=${langcode} keyboard-configuration/layoutcode?=${langcode}"
indent="     " #indent for menu entries

scan_isos "$iso_dirs"
newdir_scan_entry
